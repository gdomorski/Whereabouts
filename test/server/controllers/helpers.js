// Generated by CoffeeScript 1.10.0
var Event, User, db, event1, event2, helpers, testHelpers, user1;

testHelpers = require("../../testHelpers");

db = require("../../../server/config/database");

User = require("../../../server/models/userModel");

Event = require("../../../server/models/eventModel");

helpers = require("../../../server/controllers/helpers");

user1 = {
  name: "Rachel RoseFigura",
  fb_id: "4",
  friends: [],
  location: {
    type: "Point",
    coordinates: [-122.441, 37.762]
  }
};

event1 = {
  title: 'Party!',
  description: 'coding party',
  user: 'Rachel RoseFigura',
  createdAt: new Date(Date.now()),
  endedAt: new Date(+new Date() - 7 * 24 * 60 * 60 * 1000),
  active: true,
  location: {
    type: "Point",
    coordinates: [10, 10]
  }
};

event2 = {
  title: 'Party!',
  description: 'coding party',
  user: 'Rachel RoseFigura',
  createdAt: new Date(Date.now()),
  endedAt: new Date(+new Date() + 7 * 24 * 60 * 60 * 1000),
  active: true,
  location: {
    type: "Point",
    coordinates: [10, 10]
  }
};

describe("helpers", function() {
  beforeEach(function(done) {
    return User.remove({}, function(err, result) {
      if (err) {
        throw err;
      }
      return Event.remove({}, function(err, result) {
        if (err) {
          throw err;
        }
        console.log('CLEARED THE EVENT DB');
        return done();
      });
    });
  });
  describe("#addUserToDb", function() {
    return it("should add a user when that user doesn't exist", function(done) {
      return User.find({
        name: user1.name
      }, function(err, foundUsers) {
        if (err) {
          throw err;
        }
        expect(foundUsers).to.have.length(0);
        return helpers.addUserToDb(user1, function(err, result) {
          if (err) {
            throw err;
          }
          expect(result.name).to.equal(user1.name);
          return User.find({
            name: user1.name
          }, function(err, foundUsers) {
            if (err) {
              throw err;
            }
            expect(foundUsers).to.have.length(1);
            expect(foundUsers[0].name).to.equal(user1.name);
            expect(foundUsers[0].friends).to.have.length(0);
            return done();
          });
        });
      });
    });
  });
  describe("#addEventToDb", function() {
    return it("should add an event when that event doesn't exist", function(done) {
      return Event.find({
        name: event1.name
      }, function(err, foundEvent) {
        if (err) {
          throw err;
        }
        expect(foundEvent).to.have.length(0);
        return helpers.addEventToDb(event1, function(err, resultEvent) {
          if (err) {
            throw err;
          }
          expect(resultEvent.title).to.equal(event1.title);
          return Event.find({
            title: event1.title
          }, function(err, foundEvent) {
            if (err) {
              throw err;
            }
            expect(foundEvent).to.have.length(1);
            expect(foundEvent[0].user).to.equal(event1.user);
            expect(foundEvent[0].active).to.equal(event1.active);
            return done();
          });
        });
      });
    });
  });
  describe("#getActiveEvents", function() {
    return it("should get only active events", function(done) {
      return helpers.addEventToDb(event2, function(err, result) {
        if (err) {
          throw err;
        }
        return helpers.getActiveEvents(function(err, activeEvents) {
          if (err) {
            throw err;
          }
          expect(activeEvents.length).to.equal(1);
          return done();
        });
      });
    });
  });
  describe("#expireEvents", function() {
    return it("should not expire active events", function(done) {
      return helpers.addEventToDb(event2, function(err, result) {
        if (err) {
          throw err;
        }
        console.log('result', result);
        return helpers.expireEvents(function(err, events) {
          if (err) {
            throw err;
          }
          console.log('here1');
          return Event.find({
            active: true
          }, function(err, foundActive) {
            if (err) {
              throw err;
            }
            console.log('here2');
            expect(foundActive).to.have.length(1);
            expect(foundActive[0].active).to.equal(true);
            return done();
          });
        });
      });
    });
  });
  return describe("#expireEvents", function() {
    return it("should expire inactive events", function(done) {
      return Event.create(event1, function(err, result) {
        if (err) {
          throw err;
        }
        helpers.expireEvents(function(err, events) {
          if (err) {
            throw err;
          }
        });
        return Event.find({
          active: true
        }, function(err, foundEvent) {
          if (err) {
            throw err;
          }
          expect(foundEvent).to.have.length(0);
          return done();
        });
      });
    });
  });
});
